<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">


  <PropertyGroup>
	<ClojureCLRBuildDir>$(MSBuildThisFileDirectory)\Build</ClojureCLRBuildDir>
    <PublicKey>$(ClojureCLRBuildDir)\Key.snk</PublicKey>
	<BuildSysDir>$(RootDir)Build</BuildSysDir>
  </PropertyGroup>


  <Import Project="$(BuildSysDir)\Tasks.targets" />
  <Import Project="$(MSBuildThisFileDirectory)\CurrentVersion.props" />
  
  
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Mono Condition="'$(OS)' != 'Windows_NT'">true</Mono>
	
	<RootDir>$(MSBuildThisFileDirectory)</RootDir>
	<Solution>$(RootDir)Clojure.sln</Solution>	
	
  </PropertyGroup>
  
  <PropertyGroup>	
	
	<TestTargetFramework Condition=" '$(TestTargetFramework)' == '' ">net5.0</TestTargetFramework>
	
	<Error Condition=" '$(TestTargetFramework)' != 'net461' AND '$(TestTargetFramework)' != 'netcoreapp3.1' AND '$(TestTargetFramework)' != 'net5.0'" />
		
		
	<TestLibraryFramework Condition=" '$(TestTargetFramework)' == 'net461' ">netstandard2.0</TestLibraryFramework>
	<TestLibraryFramework Condition=" '$(TestTargetFramework)' != 'net461' ">netstandard2.1</TestLibraryFramework>
	

	<TestDir>$(RootDir)Test\$(Configuration)\$(TestTargetFramework)</TestDir>
	
	<ClojureMainBinDir Condition=" '$(TestTargetFramework)' == 'net461' ">$(RootDir)Clojure.Main461\bin\$(Configuration)\$(TestTargetFramework)</ClojureMainBinDir>
	<ClojureMainBinDir Condition=" '$(TestTargetFramework)' != 'net461' ">$(RootDir)Clojure.Main\bin\$(Configuration)\$(TestTargetFramework)</ClojureMainBinDir>
    <clji Condition=" '$(TestTargetFramework)' == 'net461' ">Clojure.Main461.exe</clji>
    <clji Condition=" '$(TestTargetFramework)' != 'net461' ">Clojure.Main.exe</clji>		
	
	<ClojureCompileBinDir>$(RootDir)Clojure.Compile\bin\$(Configuration)\$(TestTargetFramework)</ClojureCompileBinDir>
	<cljc>Clojure.Compile.exe</cljc>
	
	<ClojureSourceBinDir>$(RootDir)Clojure.Source\bin\$(Configuration)\$(TestLibraryFramework)</ClojureSourceBinDir>
	<ClojureTestsBinDir>$(RootDir)Clojure.Tests\bin\$(Configuration)\$(TestLibraryFramework)</ClojureTestsBinDir>
	
	<StageDir>$(RootDir)Stage</StageDir>

    <ZipVersion Condition=" '$(VersionSuffix)' == '' ">$(MajorVersion).$(MinorVersion).$(PatchVersion))</ZipVersion>
    <ZipVersion Condition=" '$(VersionSuffix)' != '' ">$(MajorVersion).$(MinorVersion).$(PatchVersion)-$(VersionSuffix)</ZipVersion>
	
  </PropertyGroup>

  <PropertyGroup>
    <DirectLinking Condition=" '$(DirectLinking)' == '' ">true</DirectLinking>
    <Runtime Condition=" '$(Runtime)' == '' ">.Net</Runtime>
	<PlatformSym Condition=" '$(Runtime)' == 'Mono' ">MONO</PlatformSym>
	<PlatformSym Condition=" '$(Runtime)' == '.Net' ">DOTNET</PlatformSym>
  </PropertyGroup>
	
  <Target Name="ListParams">
  	<Message Text="RootDir = $(RootDir)" />
	<Message Text="Solution = $(Solution)" />
	<Message Text="BuildSysDir = $(BuildSysDir)" />
    <Message Text="TestTargetFramework = $(TestTargetFramework)" />
	<Message Text="TestLibraryFramework = $(TestLibraryFramework)" />
	<Message Text="Configuration = $(Configuration)" />
	<Message Text="Mono = $(Mono)" />
	<Message Text="TestDir = $(TestDir)" />
	<Message Text="ClojureCompileBinDir = $(ClojureCompileBinDir)" />
	<Message Text="ClojureMainBinDir = $(ClojureMainBinDir)" />
	<Message Text="ClojureSourceBinDir = $(ClojureSourceBinDir)" />
	<Message Text="ClojureTestsBinDir = $(ClojureTestsBinDir)" />
	<Message Text="DirectLinking = $(DirectLinking)" />
	<Message Text="PlatformSym = $(PlatformSym)" />
	<Message Text="StageDir = $(StageDir)" />
	<Message Text="ClojureCLRBuildDir = $(ClojureCLRBuildDir)" />
	<Message Text="PublicKey = $(PublicKey)" />
	<Message Text="MajorVersion = $(MajorVersion)" />
	<Message Text="MinorVersion = $(MinorVersion)" />
	<Message Text="PatchVersion = $(PatchVersion)" />
	<Message Text="ZipVersion = $(ZipVersion)" />
	
  </Target>
 
   <PropertyGroup>
	<BuildProperties>
	  RootDir=$(RootDir);
	  Configuration=$(Configuration);
	  Runtime=$(Runtime);
	  PlatformSym=$(PlatformSym);
	  DirectLinking=$(DirectLinking);
	  Mono=$(Mono)	  
	</BuildProperties>
   </PropertyGroup>

  <Target Name="RestoreReferences">
    <MSBuild Projects="$(Solution)" Targets="Restore" />
  </Target>

   <Target Name="Build" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Build"
             Properties="$(BuildProperties)"/>
  </Target>
  
   <Target Name="Rebuild" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Rebuild"
             Properties="$(BuildProperties)"/>
  </Target>
  
    <Target Name="Clean" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Clean"
             Properties="$(BuildProperties)"/>
  </Target> 
  

  <Target Name="StageTest" DependsOnTargets="Build">
    <ItemGroup>
		<ClojureCompileAssets Include="$(ClojureCompileBinDir)\**\*" />
		<ClojureMainAssets Include="$(ClojureMainBinDir)\**\*" />
		<ClojureTestsAssets Include="$(ClojureTestsBinDir)\**\*" />
	</ItemGroup>	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureCompileAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />
		<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMainAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />	  
		<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureTestsAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />	  
  </Target>  
  
  <Target Name="CompileTest" DependsOnTargets="StageTest" Condition="'$(TestTargetFramework)' == 'net461'">
    <Exec Command="$(cljc) clojure.test-clojure.genclass.examples clojure.test-clojure.protocols.examples clojure.test-clojure.attributes clojure.test-clojure.compilation.load-ns clojure.test-clojure.compilation.line-number-examples" 
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(cljc) clojure.test-clojure.genclass.examples clojure.test-clojure.protocols.examples clojure.test-clojure.attributes  clojure.test-clojure.compilation.load-ns clojure.test-clojure.compilation.line-number-examples" 
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>
  
  

  
  <Target Name="Test" DependsOnTargets="StageTest;CompileTest">
    <Copy SkipUnchangedFiles="true" SourceFiles="Clojure.Tests\clojure\run_test.clj" DestinationFolder="$(TestDir)" />
    <SetEnvironmentVariable Condition="'$(TestTargetFramework)' == 'net461'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns}" />
	<SetEnvironmentVariable Condition="'$(TestTargetFramework)' != 'net461'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.attributes clojure.test-clojure.compilation clojure.test-clojure.genclass}" />						
    <Exec Command="$(clji) run_test.clj"       WorkingDirectory="$(TestDir)" Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(clji) run_test.clj"  WorkingDirectory="$(TestDir)" Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>

  <Target Name="TestGen" DependsOnTargets="StageTest;CompileTest">
    <Copy SkipUnchangedFiles="true" SourceFiles="Clojure.Tests\clojure\run_test_generative.clj" DestinationFolder="$(TestDir)" />
	<SetEnvironmentVariable Condition="'$(TestTargetFramework)' != 'net461'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.attributes clojure.test-clojure.compilation clojure.test-clojure.genclass}" />						
    <Exec Command="$(clji) run_test_generative.clj"      WorkingDirectory="$(TestDir)"  Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(clji) run_test_generative.clj" WorkingDirectory="$(TestDir)"  Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>

  <Target Name="CreateStageDir">
     <MakeDir Directories="$(StageDir)"/>
  </Target>

  <Target Name="PackAll" DependsOnTargets="Build;CreateStageDir">
    <Exec Command="dotnet pack" WorkingDirectory="$(RootDir)\Clojure"/>
	<Exec Command="dotnet pack" WorkingDirectory="$(Rootdir)\Clojure.Main"/>
	
	<ItemGroup>
		<ClojureAsset Include="$(RootDir)Clojure\bin\$(Configuration)\*.nupkg" />
		<ClojureMainAsset Include="$(RootDir)Clojure.Main\bin\$(Configuration)\*.nupkg" />
	</ItemGroup>
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureAsset)"
		  DestinationFolder="$(StageDir)\%(RecursiveDir)" />
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMainAsset)"
		  DestinationFolder="$(StageDir)\%(RecursiveDir)" />		  
  </Target>
  

  
  <Target Name="ZipAll" DependsOnTargets="PackAll">
   
    <ZipDirectory SourceDirectory="$(RootDir)Clojure.Main\bin\$(Configuration)\netcoreapp3.1\publish"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-core3.1.zip"
				  Overwrite="true"/>
	<ZipDirectory SourceDirectory="$(RootDir)Clojure.Main\bin\$(Configuration)\net5.0\publish"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-net5.0.zip"
				  Overwrite="true"/>	
				  
	<ItemGroup>
		<ClojureCompileAssets Include="$(RootDir)Clojure.Compile\bin\$(Configuration)\net461\Clojure.Compile.*" />
		<ClojureMain461Assets Include="$(RootDir)Clojure.Main461\bin\$(Configuration)\net461\**\*" />
	</ItemGroup>	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMain461Assets)"
		  DestinationFolder="$(StageDir)\net461\%(RecursiveDir)" />	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureCompileAssets)"
		  DestinationFolder="$(StageDir)\net461\%(RecursiveDir)" />			  
	  
	<ZipDirectory SourceDirectory="$(StageDir)\net461"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-net4.6.1.zip"
				  Overwrite="true"/>
  </Target>				  

  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$ -->
	
  <!-- RJ: New build and clean targets for .Net Core 3.X and .Net 5-->
  <Target Name="BuildD3">
    <Exec Command="dotnet build Clojure.sln -c Debug -p:Platform=&quot;Any CPU&quot; -f netcoreapp3.1 -o clojure-clr-debug3" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="BuildR3">
    <Exec Command="dotnet build Clojure.sln -c Release -p:Platform=&quot;Any CPU&quot; -f netcoreapp3.1 -o clojure-clr-release3" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="BuildD5">
    <Exec Command="dotnet build Clojure.sln -c Debug -p:Platform=&quot;Any CPU&quot; -f net5.0 -o clojure-clr-debug5" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="BuildR5">
    <Exec Command="dotnet build Clojure.sln -c Release -p:Platform=&quot;Any CPU&quot; -f net5.0 -o clojure-clr-release5" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="CleanD3">
    <Exec Command="dotnet clean Clojure.sln -p:Platform=&quot;Any CPU&quot; -o clojure-clr-debug3" 
          WorkingDirectory="$(OutputPath)" />
    <RemoveDir
          Directories="clojure-clr-debug3" />
  </Target>

  <Target Name="CleanR3">
    <Exec Command="dotnet clean Clojure.sln -p:Platform=&quot;Any CPU&quot; -o clojure-clr-release3" 
          WorkingDirectory="$(OutputPath)" />
    <RemoveDir
          Directories="clojure-clr-release3" />
  </Target>

  <Target Name="CleanD5">
    <Exec Command="dotnet clean Clojure.sln -p:Platform=&quot;Any CPU&quot; -o clojure-clr-debug5" 
          WorkingDirectory="$(OutputPath)" />
    <RemoveDir
          Directories="clojure-clr-debug5" />
  </Target>

  <Target Name="CleanR5">
    <Exec Command="dotnet clean Clojure.sln -p:Platform=&quot;Any CPU&quot; -o clojure-clr-release5" 
          WorkingDirectory="$(OutputPath)" />
    <RemoveDir
          Directories="clojure-clr-release5" />
  </Target>
  

<!-- Targets below are part of the pre-Core build, haven't been updated yet. -->

 <!--  Need to update whenever more DLLs are added to basic build -->
    <Target Name="Ilmerge" DependsOnTargets="Build" Condition="'$(TestTargetFramework)' == 'net461'">
    <MakeDir Directories="$(StageDir)\ilmerge\$(TestTargetFramework)" /> 
    <Exec WorkingDirectory="$(ClojureCompileBinDir)" 
          Command="ilmerge /keyfile:$(PublicKey) /out:$(StageDir)\ilmerge\$(TestTargetFramework)\Clojure.dll Clojure.dll clojure.clr.io.clj.dll clojure.clr.shell.clj.dll clojure.core.clj.dll clojure.core.protocols.clj.dll clojure.core.reducers.clj.dll clojure.core.server.clj.dll clojure.core_clr.clj.dll clojure.core_deftype.clj.dll clojure.core_print.clj.dll clojure.core_proxy.clj.dll clojure.data.clj.dll clojure.edn.clj.dll clojure.genclass.clj.dll clojure.gvec.clj.dll clojure.instant.clj.dll clojure.main.clj.dll clojure.pprint.clj.dll clojure.pprint.cl_format.clj.dll clojure.pprint.column_writer.clj.dll clojure.pprint.dispatch.clj.dll clojure.pprint.pprint_base.clj.dll clojure.pprint.pretty_writer.clj.dll clojure.pprint.print_table.clj.dll clojure.pprint.utilities.clj.dll clojure.reflect.clj.dll clojure.reflect.clr.clj.dll clojure.repl.clj.dll clojure.set.clj.dll clojure.stacktrace.clj.dll clojure.string.clj.dll clojure.template.clj.dll clojure.test.clj.dll clojure.test.junit.clj.dll clojure.test.tap.clj.dll clojure.uuid.clj.dll clojure.walk.clj.dll clojure.zip.clj.dll clojure.datafy.clj.dll"
          />

  </Target>
  

  <!-- RJ: Reworked Dist target to work around Mono bug related to embeding ItemGroup inside a Target tag -->
  <Target Name="Dist" DependsOnTargets="Build">
      <!--DLR, Clojure dlls and exes-->
      <CreateItem
      Include="$(OutputPath)\Clojure.*;$(OutputPath)\Microsoft.*" 
      Exclude="$(OutputPath)\Clojure.Tests.dll;$(OutputPath)\Clojure.Tests.pdb;
               $(OutputPath)\Clojure.Source.dll;$(OutputPath)\Clojure.Source.pdb;
               $(OutputPath)\clojure.test-clojure.genclass.examples.ExampleClass.dll;
               $(OutputPath)\clojure.test-clojure.genclass.examples.ExampleClass.pdb;
               $(OutputPath)\Clojure.Main.vshost.exe;$(OutputPath)\Clojure.Main.vshost.exe.manifest">
      <Output
            TaskParameter="Include"
            ItemName="Dlls"/>
     </CreateItem>
      <!--clj and AOT clj files-->
    <CreateItem
       Include="$(OutputPath)\clojure\**\*"
       Exclude="$(OutputPath)\clojure\test_clojure\**\*">
     <Output
       TaskParameter="Include"
       ItemName="CljFiles"/>
     </CreateItem>
    <Copy SourceFiles="@(Dlls)" DestinationFolder="..\dist\$(Configuration)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(CljFiles)" DestinationFolder="..\dist\$(Configuration)\clojure\%(RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>

  
</Project>
