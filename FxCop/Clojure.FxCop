<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="10.0" Name="My FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">$(FxCopDir)\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded, Good, Noise" NewOnly="False" />
   <Report Status="Active, Good, Noise" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <Target Name="$(ProjectDir)/../bin/4.0/Debug/Clojure.Compile.exe" Analyze="True" AnalyzeAllChildren="True" />
  <Target Name="$(ProjectDir)/../bin/4.0/Debug/Clojure.dll" Analyze="True" AnalyzeAllChildren="True" />
  <Target Name="$(ProjectDir)/../bin/4.0/Debug/Clojure.Main.exe" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInUnexpectedLocations" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AvoidDuplicateAccelerators" Enabled="True" />
    <Rule Name="DoNotHardcodeLocaleSpecificStrings" Enabled="True" />
    <Rule Name="NormalizeStringsToUppercase" Enabled="True" />
    <Rule Name="SetLocaleForDataTypes" Enabled="True" />
    <Rule Name="SpecifyMarshalingForPInvokeStringArguments" Enabled="True" />
    <Rule Name="SpecifyMessageBoxOptions" Enabled="True" />
    <Rule Name="UseOrdinalStringComparison" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="CompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="DoNotNameEnumValuesReserved" Enabled="True" />
    <Rule Name="DoNotPrefixEnumValuesWithTypeName" Enabled="True" />
    <Rule Name="EventsShouldNotHaveBeforeOrAfterPrefix" Enabled="True" />
    <Rule Name="FlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="IdentifiersShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldDifferByMoreThanCase" Enabled="True" />
    <Rule Name="IdentifiersShouldNotContainUnderscores" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotMatchKeywords" Enabled="True" />
    <Rule Name="OnlyFlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="ParameterNamesShouldMatchBaseDeclaration" Enabled="True" />
    <Rule Name="ParameterNamesShouldNotMatchMemberNames" Enabled="True" />
    <Rule Name="PropertyNamesShouldNotMatchGetMethods" Enabled="True" />
    <Rule Name="ResourceStringCompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="ResourceStringsShouldBeSpelledCorrectly" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AvoidExcessiveLocals" Enabled="True" />
    <Rule Name="AvoidUninstantiatedInternalClasses" Enabled="True" />
    <Rule Name="AvoidUnsealedAttributes" Enabled="True" />
    <Rule Name="AvoidUnusedPrivateFields" Enabled="True" />
    <Rule Name="DoNotCastUnnecessarily" Enabled="True" />
    <Rule Name="InitializeReferenceTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="MarkAssembliesWithNeutralResourcesLanguage" Enabled="True" />
    <Rule Name="MarkMembersAsStatic" Enabled="True" />
    <Rule Name="OverrideEqualsAndOperatorEqualsOnValueTypes" Enabled="True" />
    <Rule Name="PreferJaggedArraysOverMultidimensional" Enabled="True" />
    <Rule Name="PropertiesShouldNotReturnArrays" Enabled="True" />
    <Rule Name="RemoveEmptyFinalizers" Enabled="True" />
    <Rule Name="RemoveUnusedLocals" Enabled="True" />
    <Rule Name="TestForEmptyStringsUsingStringLength" Enabled="True" />
    <Rule Name="UseLiteralsWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AptcaMethodsShouldOnlyCallAptcaMethods" Enabled="True" />
    <Rule Name="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Enabled="True" />
    <Rule Name="ArrayFieldsShouldNotBeReadOnly" Enabled="True" />
    <Rule Name="CallGCKeepAliveWhenUsingNativeResources" Enabled="True" />
    <Rule Name="CatchNonClsCompliantExceptionsInGeneralHandlers" Enabled="True" />
    <Rule Name="DoNotIndirectlyExposeMethodsWithLinkDemands" Enabled="True" />
    <Rule Name="MethodSecurityShouldBeASupersetOfType" Enabled="True" />
    <Rule Name="PointersShouldNotBeVisible" Enabled="True" />
    <Rule Name="ReviewDeclarativeSecurityOnValueTypes" Enabled="True" />
    <Rule Name="ReviewDenyAndPermitOnlyUsage" Enabled="True" />
    <Rule Name="ReviewImperativeSecurity" Enabled="True" />
    <Rule Name="ReviewSuppressUnmanagedCodeSecurityUsage" Enabled="True" />
    <Rule Name="ReviewVisibleEventHandlers" Enabled="True" />
    <Rule Name="SealMethodsThatSatisfyPrivateInterfaces" Enabled="True" />
    <Rule Name="SecureAsserts" Enabled="True" />
    <Rule Name="SecuredTypesShouldNotExposeFields" Enabled="True" />
    <Rule Name="SecureSerializationConstructors" Enabled="True" />
    <Rule Name="StaticConstructorsShouldBePrivate" Enabled="True" />
    <Rule Name="TypeLinkDemandsRequireInheritanceDemands" Enabled="True" />
    <Rule Name="WrapVulnerableFinallyClausesInOuterTry" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\SecurityTransparencyRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AttributeStringLiteralsShouldParseCorrectly" Enabled="True" />
    <Rule Name="CallBaseClassMethodsOnISerializableTypes" Enabled="True" />
    <Rule Name="CallGCSuppressFinalizeCorrectly" Enabled="True" />
    <Rule Name="CollectionPropertiesShouldBeReadOnly" Enabled="True" />
    <Rule Name="DisposableFieldsShouldBeDisposed" Enabled="True" />
    <Rule Name="DisposableTypesShouldDeclareFinalizer" Enabled="True" />
    <Rule Name="DoNotCallOverridableMethodsInConstructors" Enabled="True" />
    <Rule Name="DoNotDecreaseInheritedMemberVisibility" Enabled="True" />
    <Rule Name="DoNotIgnoreMethodResults" Enabled="True" />
    <Rule Name="DoNotMarkEnumsWithFlags" Enabled="True" />
    <Rule Name="DoNotMarkServicedComponentsWithWebMethod" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInExceptionClauses" Enabled="True" />
    <Rule Name="DoNotRaiseReservedExceptionTypes" Enabled="True" />
    <Rule Name="DoNotShipUnreleasedResourceFormats" Enabled="True" />
    <Rule Name="FinalizersShouldBeProtected" Enabled="True" />
    <Rule Name="FinalizersShouldCallBaseClassFinalizer" Enabled="True" />
    <Rule Name="ImplementISerializableCorrectly" Enabled="True" />
    <Rule Name="ImplementSerializationConstructors" Enabled="True" />
    <Rule Name="ImplementSerializationMethodsCorrectly" Enabled="True" />
    <Rule Name="InitializeValueTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="InstantiateArgumentExceptionsCorrectly" Enabled="True" />
    <Rule Name="MarkAllNonSerializableFields" Enabled="True" />
    <Rule Name="MarkISerializableTypesWithSerializable" Enabled="True" />
    <Rule Name="MarkWindowsFormsEntryPointsWithStaThread" Enabled="True" />
    <Rule Name="MembersShouldDifferByMoreThanReturnType" Enabled="True" />
    <Rule Name="NonConstantFieldsShouldNotBeVisible" Enabled="True" />
    <Rule Name="OperationsShouldNotOverflow" Enabled="True" />
    <Rule Name="OperatorOverloadsHaveNamedAlternates" Enabled="True" />
    <Rule Name="OperatorsShouldHaveSymmetricalOverloads" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverridingValueTypeEquals" Enabled="True" />
    <Rule Name="OverrideEqualsOnOverloadingOperatorEquals" Enabled="True" />
    <Rule Name="OverrideGetHashCodeOnOverridingEquals" Enabled="True" />
    <Rule Name="PassSystemUriObjectsInsteadOfStrings" Enabled="True" />
    <Rule Name="ProvideDeserializationMethodsForOptionalFields" Enabled="True" />
    <Rule Name="RethrowToPreserveStackDetails" Enabled="True" />
    <Rule Name="TestForNaNCorrectly" Enabled="True" />
    <Rule Name="UseManagedEquivalentsOfWin32Api" Enabled="True" />
    <Rule Name="UseParamsForVariableArguments" Enabled="True" />
   </RuleFile>
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="10.0">
  <Targets>
   <Target Name="$(ProjectDir)/../bin/4.0/Debug/Clojure.dll">
    <Modules>
     <Module Name="clojure.dll">
      <Namespaces>
       <Namespace Name="clojure.lang">
        <Types>
         <Type Name="Compiler">
          <Members>
           <Member Name="#.cctor()">
            <Messages>
             <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2015-08-19 14:08:47Z" FixCategory="NonBreaking">
              <Issue Name="NoAllowedExceptions" Level="Error">
               <Item>'Compiler.Compiler()'</Item>
               <Item>'ArgumentNullException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Tuple">
          <Messages>
           <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Created="2015-08-19 14:08:47Z">
            <Issue Name="CSharp2_0">
             <Item>'Tuple'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="clojure.lang.CljCompiler.Ast">
        <Types>
         <Type Name="BindingInit">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2015-08-22 13:54:41Z">
            <Issue Name="Equals">
             <Item>'BindingInit'</Item>
            </Issue>
            <Issue Name="op_Equality">
             <Item>'BindingInit'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ImportExpr">
          <Members>
           <Member Name="#ClrType">
            <Accessors>
             <Accessor Name="#get_ClrType()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2015-08-22 13:54:41Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'ImportExpr.ClrType.get()'</Item>
                 <Item>'ArgumentException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="InstanceFieldOrPropertyExpr`1">
          <Messages>
           <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Created="2015-08-22 13:54:41Z">
            <Issue>
             <Item>'InstanceFieldOrPropertyExpr&lt;TInfo&gt;'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="InstanceMethodExpr">
          <Members>
           <Member Name="#.ctor(System.String,clojure.lang.IPersistentMap,clojure.lang.Symbol,clojure.lang.CljCompiler.Ast.Expr,System.String,System.Collections.Generic.List`1&lt;System.Type&gt;,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;,System.Boolean)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'InstanceMethodExpr.InstanceMethodExpr(string, IPersistentMap, Symbol, Expr, string, List&lt;Type&gt;, List&lt;HostArg&gt;, bool)'</Item>
              </Issue>
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'InstanceMethodExpr.InstanceMethodExpr(string, IPersistentMap, Symbol, Expr, string, List&lt;Type&gt;, List&lt;HostArg&gt;, bool)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MethodExpr">
          <Members>
           <Member Name="#.ctor(System.String,clojure.lang.IPersistentMap,clojure.lang.Symbol,System.String,System.Collections.Generic.List`1&lt;System.Type&gt;,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;,System.Boolean)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'MethodExpr.MethodExpr(string, IPersistentMap, Symbol, string, List&lt;Type&gt;, List&lt;HostArg&gt;, bool)'</Item>
              </Issue>
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'MethodExpr.MethodExpr(string, IPersistentMap, Symbol, string, List&lt;Type&gt;, List&lt;HostArg&gt;, bool)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#_args">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'MethodExpr._args'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#_typeArgs">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'MethodExpr._typeArgs'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Args">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'MethodExpr.Args'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#EmitByRefArg(clojure.lang.CljCompiler.Ast.HostArg,clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.CljILGen)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'ilg'</Item>
               <Item>'MethodExpr.EmitByRefArg(HostArg, ObjExpr, CljILGen)'</Item>
               <Item>'CljILGen'</Item>
               <Item>'ILGen'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#EmitDynamicCallPostlude(System.Linq.Expressions.LambdaExpression,System.Type,System.Reflection.Emit.MethodBuilder,clojure.lang.CljCompiler.Ast.CljILGen)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'ilg'</Item>
               <Item>'MethodExpr.EmitDynamicCallPostlude(LambdaExpression, Type, MethodBuilder, CljILGen)'</Item>
               <Item>'CljILGen'</Item>
               <Item>'ILGen'</Item>
              </Issue>
              <Issue>
               <Item>'mbLambda'</Item>
               <Item>'MethodExpr.EmitDynamicCallPostlude(LambdaExpression, Type, MethodBuilder, CljILGen)'</Item>
               <Item>'MethodBuilder'</Item>
               <Item>'MethodInfo'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#EmitDynamicCallPreamble(System.Linq.Expressions.DynamicExpression,clojure.lang.IPersistentMap,System.String,System.Type,System.Collections.Generic.List`1&lt;System.Linq.Expressions.ParameterExpression&gt;,System.Type[],clojure.lang.CljCompiler.Ast.CljILGen,System.Linq.Expressions.LambdaExpression&amp;,System.Type&amp;,System.Reflection.Emit.MethodBuilder&amp;)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'ilg'</Item>
               <Item>'MethodExpr.EmitDynamicCallPreamble(DynamicExpression, IPersistentMap, string, Type, List&lt;ParameterExpression&gt;, Type[], CljILGen, out LambdaExpression, out Type, out MethodBuilder)'</Item>
               <Item>'CljILGen'</Item>
               <Item>'ILGen'</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;ParameterExpression&gt;'</Item>
               <Item>'MethodExpr.EmitDynamicCallPreamble(DynamicExpression, IPersistentMap, string, Type, List&lt;ParameterExpression&gt;, Type[], CljILGen, out LambdaExpression, out Type, out MethodBuilder)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#EmitTypedArgs(clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.CljILGen,System.Reflection.ParameterInfo[],clojure.lang.IPersistentVector)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'args'</Item>
               <Item>'MethodExpr.EmitTypedArgs(ObjExpr, CljILGen, ParameterInfo[], IPersistentVector)'</Item>
               <Item>'IPersistentVector'</Item>
               <Item>'Indexed'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#EmitTypedArgs(clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.CljILGen,System.Reflection.ParameterInfo[],System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'MethodExpr.EmitTypedArgs(ObjExpr, CljILGen, ParameterInfo[], List&lt;HostArg&gt;)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TypeArgs">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'MethodExpr.TypeArgs'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewExpr">
          <Members>
           <Member Name="#.ctor(System.Type,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;,clojure.lang.IPersistentMap)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'NewExpr.NewExpr(Type, List&lt;HostArg&gt;, IPersistentMap)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Args">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'NewExpr.Args'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewInstanceExpr">
          <Members>
           <Member Name="#MethodMap">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'NewInstanceExpr.MethodMap'</Item>
               <Item>'Dictionary&lt;IPersistentVector, List&lt;MethodInfo&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewInstanceMethod">
          <Members>
           <Member Name="#MethodInfos">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;MethodInfo&gt;'</Item>
               <Item>'NewInstanceMethod.MethodInfos'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NumberExpr">
          <Members>
           <Member Name="#ClrType">
            <Accessors>
             <Accessor Name="#get_ClrType()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2015-08-22 13:54:41Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'NumberExpr.ClrType.get()'</Item>
                 <Item>'ArgumentException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="ObjExpr">
          <Members>
           <Member Name="#CachedTypeFields">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;FieldBuilder&gt;'</Item>
               <Item>'ObjExpr.CachedTypeFields'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#KeywordLookupSiteFields">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;FieldBuilder&gt;'</Item>
               <Item>'ObjExpr.KeywordLookupSiteFields'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ThunkFields">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;FieldBuilder&gt;'</Item>
               <Item>'ObjExpr.ThunkFields'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ObjMethod">
          <Messages>
           <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Created="2015-08-22 13:54:41Z">
            <Issue>
             <Item>'ObjMethod'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#EmitClearThis(clojure.lang.CljCompiler.Ast.CljILGen)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2015-08-19 14:08:47Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'ObjMethod.EmitClearThis(CljILGen)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Recur">
          <Messages>
           <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Created="2015-08-22 13:54:41Z">
            <Issue Name="CSharp2_0">
             <Item>'Recur'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#RecurType">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'Recur.RecurType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="StaticMethodExpr">
          <Members>
           <Member Name="#.ctor(System.String,clojure.lang.IPersistentMap,clojure.lang.Symbol,System.Type,System.String,System.Collections.Generic.List`1&lt;System.Type&gt;,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;,System.Boolean)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'StaticMethodExpr.StaticMethodExpr(string, IPersistentMap, Symbol, Type, string, List&lt;Type&gt;, List&lt;HostArg&gt;, bool)'</Item>
              </Issue>
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'StaticMethodExpr.StaticMethodExpr(string, IPersistentMap, Symbol, Type, string, List&lt;Type&gt;, List&lt;HostArg&gt;, bool)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#IsBoxedMath(System.Reflection.MethodInfo)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2015-08-22 13:54:41Z">
              <Issue>
               <Item>'m'</Item>
               <Item>'StaticMethodExpr.IsBoxedMath(MethodInfo)'</Item>
               <Item>'MethodInfo'</Item>
               <Item>'MethodBase'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="UntypedExpr">
          <Members>
           <Member Name="#ClrType">
            <Accessors>
             <Accessor Name="#get_ClrType()">
              <Messages>
               <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Created="2015-08-22 13:54:41Z" FixCategory="Breaking">
                <Issue Name="PropertyGetter" Level="Warning">
                 <Item>'UntypedExpr.ClrType.get()'</Item>
                 <Item>'ArgumentException'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
    <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   </Rule>
   <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
    <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   </Rule>
   <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
    <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   </Rule>
   <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
    <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   </Rule>
   <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
    <Resolution Name="NoAllowedExceptions">{0} creates an exception of type {1}. Exceptions should not be raised in this type of method. If this exception instance might be raised, change this method's logic so it no longer raises an exception.</Resolution>
    <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
    <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   </Rule>
   <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
    <Resolution Name="Equals">{0} should override Equals.</Resolution>
    <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   </Rule>
   <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
    <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
