<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="10.0" Name="My FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">$(FxCopDir)\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded, Good, Noise" NewOnly="False" />
   <Report Status="Active, Good, Noise" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <Target Name="$(ProjectDir)/../bin/4.0/Debug/Clojure.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInUnexpectedLocations" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="CompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="DoNotNameEnumValuesReserved" Enabled="True" />
    <Rule Name="DoNotPrefixEnumValuesWithTypeName" Enabled="True" />
    <Rule Name="EventsShouldNotHaveBeforeOrAfterPrefix" Enabled="True" />
    <Rule Name="FlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="IdentifiersShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="IdentifiersShouldDifferByMoreThanCase" Enabled="True" />
    <Rule Name="IdentifiersShouldNotContainUnderscores" Enabled="True" />
    <Rule Name="IdentifiersShouldNotHaveIncorrectPrefix" Enabled="True" />
    <Rule Name="IdentifiersShouldNotMatchKeywords" Enabled="True" />
    <Rule Name="OnlyFlagsEnumsShouldHavePluralNames" Enabled="True" />
    <Rule Name="ParameterNamesShouldMatchBaseDeclaration" Enabled="True" />
    <Rule Name="ParameterNamesShouldNotMatchMemberNames" Enabled="True" />
    <Rule Name="PropertyNamesShouldNotMatchGetMethods" Enabled="True" />
    <Rule Name="ResourceStringCompoundWordsShouldBeCasedCorrectly" Enabled="True" />
    <Rule Name="ResourceStringsShouldBeSpelledCorrectly" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AvoidExcessiveLocals" Enabled="True" />
    <Rule Name="AvoidUninstantiatedInternalClasses" Enabled="True" />
    <Rule Name="AvoidUnsealedAttributes" Enabled="True" />
    <Rule Name="AvoidUnusedPrivateFields" Enabled="True" />
    <Rule Name="DoNotCastUnnecessarily" Enabled="True" />
    <Rule Name="InitializeReferenceTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="MarkAssembliesWithNeutralResourcesLanguage" Enabled="True" />
    <Rule Name="MarkMembersAsStatic" Enabled="True" />
    <Rule Name="OverrideEqualsAndOperatorEqualsOnValueTypes" Enabled="True" />
    <Rule Name="PreferJaggedArraysOverMultidimensional" Enabled="True" />
    <Rule Name="PropertiesShouldNotReturnArrays" Enabled="True" />
    <Rule Name="RemoveEmptyFinalizers" Enabled="True" />
    <Rule Name="RemoveUnusedLocals" Enabled="True" />
    <Rule Name="TestForEmptyStringsUsingStringLength" Enabled="True" />
    <Rule Name="UseLiteralsWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AptcaMethodsShouldOnlyCallAptcaMethods" Enabled="True" />
    <Rule Name="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Enabled="True" />
    <Rule Name="ArrayFieldsShouldNotBeReadOnly" Enabled="True" />
    <Rule Name="CallGCKeepAliveWhenUsingNativeResources" Enabled="True" />
    <Rule Name="CatchNonClsCompliantExceptionsInGeneralHandlers" Enabled="True" />
    <Rule Name="DoNotIndirectlyExposeMethodsWithLinkDemands" Enabled="True" />
    <Rule Name="MethodSecurityShouldBeASupersetOfType" Enabled="True" />
    <Rule Name="PointersShouldNotBeVisible" Enabled="True" />
    <Rule Name="ReviewDeclarativeSecurityOnValueTypes" Enabled="True" />
    <Rule Name="ReviewDenyAndPermitOnlyUsage" Enabled="True" />
    <Rule Name="ReviewImperativeSecurity" Enabled="True" />
    <Rule Name="ReviewSuppressUnmanagedCodeSecurityUsage" Enabled="True" />
    <Rule Name="ReviewVisibleEventHandlers" Enabled="True" />
    <Rule Name="SealMethodsThatSatisfyPrivateInterfaces" Enabled="True" />
    <Rule Name="SecureAsserts" Enabled="True" />
    <Rule Name="SecuredTypesShouldNotExposeFields" Enabled="True" />
    <Rule Name="SecureSerializationConstructors" Enabled="True" />
    <Rule Name="StaticConstructorsShouldBePrivate" Enabled="True" />
    <Rule Name="TypeLinkDemandsRequireInheritanceDemands" Enabled="True" />
    <Rule Name="WrapVulnerableFinallyClausesInOuterTry" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\SecurityTransparencyRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AttributeStringLiteralsShouldParseCorrectly" Enabled="True" />
    <Rule Name="CallBaseClassMethodsOnISerializableTypes" Enabled="True" />
    <Rule Name="CallGCSuppressFinalizeCorrectly" Enabled="True" />
    <Rule Name="CollectionPropertiesShouldBeReadOnly" Enabled="True" />
    <Rule Name="DisposableFieldsShouldBeDisposed" Enabled="True" />
    <Rule Name="DisposableTypesShouldDeclareFinalizer" Enabled="True" />
    <Rule Name="DoNotCallOverridableMethodsInConstructors" Enabled="True" />
    <Rule Name="DoNotDecreaseInheritedMemberVisibility" Enabled="True" />
    <Rule Name="DoNotIgnoreMethodResults" Enabled="True" />
    <Rule Name="DoNotMarkEnumsWithFlags" Enabled="True" />
    <Rule Name="DoNotMarkServicedComponentsWithWebMethod" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInExceptionClauses" Enabled="True" />
    <Rule Name="DoNotRaiseReservedExceptionTypes" Enabled="True" />
    <Rule Name="DoNotShipUnreleasedResourceFormats" Enabled="True" />
    <Rule Name="FinalizersShouldBeProtected" Enabled="True" />
    <Rule Name="FinalizersShouldCallBaseClassFinalizer" Enabled="True" />
    <Rule Name="ImplementISerializableCorrectly" Enabled="True" />
    <Rule Name="ImplementSerializationConstructors" Enabled="True" />
    <Rule Name="ImplementSerializationMethodsCorrectly" Enabled="True" />
    <Rule Name="InitializeValueTypeStaticFieldsInline" Enabled="True" />
    <Rule Name="InstantiateArgumentExceptionsCorrectly" Enabled="True" />
    <Rule Name="MarkAllNonSerializableFields" Enabled="True" />
    <Rule Name="MarkISerializableTypesWithSerializable" Enabled="True" />
    <Rule Name="MarkWindowsFormsEntryPointsWithStaThread" Enabled="True" />
    <Rule Name="MembersShouldDifferByMoreThanReturnType" Enabled="True" />
    <Rule Name="NonConstantFieldsShouldNotBeVisible" Enabled="True" />
    <Rule Name="OperationsShouldNotOverflow" Enabled="True" />
    <Rule Name="OperatorOverloadsHaveNamedAlternates" Enabled="True" />
    <Rule Name="OperatorsShouldHaveSymmetricalOverloads" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverridingValueTypeEquals" Enabled="True" />
    <Rule Name="OverrideEqualsOnOverloadingOperatorEquals" Enabled="True" />
    <Rule Name="OverrideGetHashCodeOnOverridingEquals" Enabled="True" />
    <Rule Name="PassSystemUriObjectsInsteadOfStrings" Enabled="True" />
    <Rule Name="ProvideDeserializationMethodsForOptionalFields" Enabled="True" />
    <Rule Name="RethrowToPreserveStackDetails" Enabled="True" />
    <Rule Name="TestForNaNCorrectly" Enabled="True" />
    <Rule Name="UseManagedEquivalentsOfWin32Api" Enabled="True" />
    <Rule Name="UseParamsForVariableArguments" Enabled="True" />
   </RuleFile>
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="10.0">
  <Targets>
   <Target Name="$(ProjectDir)/../bin/4.0/Debug/Clojure.dll">
    <Modules>
     <Module Name="clojure.dll">
      <Namespaces>
       <Namespace Name="clojure.lang">
        <Types>
         <Type Name="APersistentMap">
          <Members>
           <Member Name="#cons(System.Object)">
            <Messages>
             <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[])'</Item>
               <Item>'APersistentMap.cons(object)'</Item>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'</Item>
              </Issue>
              <Issue>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[])'</Item>
               <Item>'APersistentMap.cons(object)'</Item>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#equiv(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'APersistentMap.equiv(object)'</Item>
               <Item>'obj'</Item>
               <Item>'o'</Item>
               <Item>'IPersistentCollection.equiv(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="APersistentVector">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2011-07-31 21:54:45Z">
            <Issue Name="Operator">
             <Item>'APersistentVector'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'APersistentVector'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'APersistentVector'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'APersistentVector'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#equiv(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'APersistentVector.equiv(object)'</Item>
               <Item>'obj'</Item>
               <Item>'o'</Item>
               <Item>'IPersistentCollection.equiv(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ASeq">
          <Members>
           <Member Name="#CopyTo(System.Object[],System.Int32)">
            <Messages>
             <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'ASeq.CopyTo(object[], int)'</Item>
               <Item>'index'</Item>
               <Item>'arrayIndex'</Item>
               <Item>'ICollection&lt;object&gt;.CopyTo(object[], int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#equiv(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'ASeq.equiv(object)'</Item>
               <Item>'obj'</Item>
               <Item>'o'</Item>
               <Item>'IPersistentCollection.equiv(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ATransientSet">
          <Members>
           <Member Name="#invoke(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'ATransientSet.invoke(object)'</Item>
               <Item>'key'</Item>
               <Item>'arg1'</Item>
               <Item>'AFn.invoke(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#invoke(System.Object,System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'ATransientSet.invoke(object, object)'</Item>
               <Item>'key'</Item>
               <Item>'arg1'</Item>
               <Item>'AFn.invoke(object, object)'</Item>
              </Issue>
             </Message>
             <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'ATransientSet.invoke(object, object)'</Item>
               <Item>'notFound'</Item>
               <Item>'arg2'</Item>
               <Item>'AFn.invoke(object, object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BigDecimal">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2011-07-31 21:54:45Z">
            <Issue Name="Operator">
             <Item>'BigDecimal'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'BigDecimal'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'BigDecimal'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'BigDecimal'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#DivideInteger(clojure.lang.BigDecimal,clojure.lang.BigDecimal+Context)">
            <Messages>
             <Message Id="precisionDiff" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigDecimal.DivideInteger(BigDecimal, BigDecimal.Context)'</Item>
               <Item>'precisionDiff'</Item>
               <Item>'int'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#DoParse(System.Char[],System.Int32,System.Int32,System.Boolean,clojure.lang.BigDecimal&amp;)">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'int.Parse(string)'</Item>
               <Item>'BigDecimal.DoParse(char[], int, int, bool, out BigDecimal)'</Item>
               <Item>'int.Parse(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ONE">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigDecimal.ONE'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Addition(clojure.lang.BigDecimal,clojure.lang.BigDecimal)">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigDecimal'</Item>
               <Item>'BigDecimal.operator +(BigDecimal, BigDecimal)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Subtraction(clojure.lang.BigDecimal,clojure.lang.BigDecimal)">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigDecimal'</Item>
               <Item>'BigDecimal.operator -(BigDecimal, BigDecimal)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryNegation(clojure.lang.BigDecimal)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2011-07-31 21:54:45Z">
              <Issue Name="Visibility">
               <Item>'BigDecimal.Negate(BigDecimal)'</Item>
               <Item>'BigDecimal.operator -(BigDecimal)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TEN">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigDecimal.TEN'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToScientificString()">
            <Messages>
             <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'long.ToString()'</Item>
               <Item>'BigDecimal.ToScientificString()'</Item>
               <Item>'long.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToType(System.Type,System.IFormatProvider)">
            <Messages>
             <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ChangeType(object, Type)'</Item>
               <Item>'BigDecimal.ToType(Type, IFormatProvider)'</Item>
               <Item>'Convert.ChangeType(object, Type, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ZERO">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigDecimal.ZERO'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BigDecimal+Context">
          <Messages>
           <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Created="2011-07-31 21:54:45Z">
            <Issue Name="op_Equality">
             <Item>'BigDecimal.Context'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Equals(System.Object)">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigDecimal.Context'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToString()">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'BigDecimal.Context.ToString()'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BigInt">
          <Members>
           <Member Name="#intValue()">
            <Messages>
             <Message Id="clojure.lang.BigInteger.ToInt32" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'BigInteger.ToInt32()'</Item>
               <Item>'BigInt.intValue()'</Item>
               <Item>'BigInteger.ToInt32(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#longValue()">
            <Messages>
             <Message Id="clojure.lang.BigInteger.ToInt64" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'BigInteger.ToInt64()'</Item>
               <Item>'BigInt.longValue()'</Item>
               <Item>'BigInteger.ToInt64(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToString()">
            <Messages>
             <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'long.ToString()'</Item>
               <Item>'BigInt.ToString()'</Item>
               <Item>'long.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="BigInteger">
          <Members>
           <Member Name="#FIVE">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigInteger.FIVE'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#HybridGcd(clojure.lang.BigInteger,clojure.lang.BigInteger)">
            <Messages>
             <Message Id="q" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigInteger.HybridGcd(BigInteger, BigInteger)'</Item>
               <Item>'q'</Item>
               <Item>'BigInteger'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NEGATIVE_ONE">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigInteger.NEGATIVE_ONE'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ONE">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigInteger.ONE'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_ExclusiveOr(clojure.lang.BigInteger,clojure.lang.BigInteger)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>Xor</Item>
               <Item>'BigInteger.operator ^(BigInteger, BigInteger)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_OnesComplement(clojure.lang.BigInteger)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>OnesComplement</Item>
               <Item>'BigInteger.operator ~(BigInteger)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_UnaryNegation(clojure.lang.BigInteger)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2011-07-31 21:54:45Z">
              <Issue Name="Visibility">
               <Item>'BigInteger.Negate(BigInteger)'</Item>
               <Item>'BigInteger.operator -(BigInteger)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TEN">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigInteger.TEN'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToDecimal(System.IFormatProvider)">
            <Messages>
             <Message Id="clojure.lang.BigInteger.ToDecimal" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'BigInteger.ToDecimal()'</Item>
               <Item>'BigInteger.ToDecimal(IFormatProvider)'</Item>
               <Item>'BigInteger.ToDecimal(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToInt32(System.IFormatProvider)">
            <Messages>
             <Message Id="clojure.lang.BigInteger.ToInt32" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'BigInteger.ToInt32()'</Item>
               <Item>'BigInteger.ToInt32(IFormatProvider)'</Item>
               <Item>'BigInteger.ToInt32(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToInt64(System.IFormatProvider)">
            <Messages>
             <Message Id="clojure.lang.BigInteger.ToInt64" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'BigInteger.ToInt64()'</Item>
               <Item>'BigInteger.ToInt64(IFormatProvider)'</Item>
               <Item>'BigInteger.ToInt64(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToString(System.UInt32)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'BigInteger.ToString(uint)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToUInt32(System.IFormatProvider)">
            <Messages>
             <Message Id="clojure.lang.BigInteger.ToUInt32" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'BigInteger.ToUInt32()'</Item>
               <Item>'BigInteger.ToUInt32(IFormatProvider)'</Item>
               <Item>'BigInteger.ToUInt32(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToUInt64(System.IFormatProvider)">
            <Messages>
             <Message Id="clojure.lang.BigInteger.ToUInt64" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'BigInteger.ToUInt64()'</Item>
               <Item>'BigInteger.ToUInt64(IFormatProvider)'</Item>
               <Item>'BigInteger.ToUInt64(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TWO">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigInteger.TWO'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ZERO">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'BigInteger.ZERO'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Compiler">
          <Members>
           <Member Name="#AnalyzeSymbol(clojure.lang.Symbol)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Compiler.AnalyzeSymbol(Symbol)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Compiler.AnalyzeSymbol(Symbol)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CHAR_MAP">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Compiler.CHAR_MAP'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Compile(System.IO.TextReader,System.String,System.String,System.String)">
            <Messages>
             <Message Id="exprType" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Compiler.Compile(TextReader, string, string, string)'</Item>
               <Item>'exprType'</Item>
               <Item>'Type'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#DestubClassName(System.String)">
            <Messages>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'Compiler.DestubClassName(string)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#eval(System.Object)">
            <Messages>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'Compiler.eval(object)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#IsMacro(System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Compiler.IsMacro(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#LoadAssembly(System.IO.FileInfo)">
            <Messages>
             <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[])'</Item>
               <Item>'Compiler.LoadAssembly(FileInfo)'</Item>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#LookupVar(clojure.lang.Symbol,System.Boolean)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Compiler.LookupVar(Symbol, bool)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#maybeResolveIn(clojure.lang.Namespace,clojure.lang.Symbol)">
            <Messages>
             <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'Compiler.maybeResolveIn(Namespace, Symbol)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ResolveIn(clojure.lang.Namespace,clojure.lang.Symbol,System.Boolean)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Compiler.ResolveIn(Namespace, Symbol, bool)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Compiler.ResolveIn(Namespace, Symbol, bool)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SaveEvalContext()">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'Compiler.SaveEvalContext()'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Compiler+CompilerException">
          <Members>
           <Member Name="#ErrorMsg(System.String,System.Int32,System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'Compiler.CompilerException.ErrorMsg(string, int, string)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CountDownLatch">
          <Members>
           <Member Name="#ToString()">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'CountDownLatch.ToString()'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FormatFlagsConversionMismatchException">
          <Members>
           <Member Name="#.ctor(System.String,System.Char)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'FormatFlagsConversionMismatchException.FormatFlagsConversionMismatchException(string, char)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Future">
          <Messages>
           <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Created="2011-07-31 21:54:45Z" FixCategory="DependsOnFix">
            <Issue Name="DependsOnFix">
             <Item>'Future'</Item>
             <Item>'ManualResetEvent'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="GenClass">
          <Members>
           <Member Name="#ComputeOverloads(System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.MethodSignature&gt;)">
            <Messages>
             <Message Id="overloadNames" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'GenClass.ComputeOverloads(List&lt;MethodSignature&gt;)'</Item>
               <Item>'overloadNames'</Item>
               <Item>'HashSet&lt;string&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GenInterface">
          <Members>
           <Member Name="#CreateCustomAttributeBuilder(clojure.lang.IMapEntry)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'GenInterface.CreateCustomAttributeBuilder(IMapEntry)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'GenInterface.CreateCustomAttributeBuilder(IMapEntry)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#DefineMethod(System.Reflection.Emit.TypeBuilder,clojure.lang.IPersistentVector)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'GenInterface.DefineMethod(TypeBuilder, IPersistentVector)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="GenProxy">
          <Members>
           <Member Name="#.ctor(System.String)">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'GenProxy.GenProxy(string)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IllegalFormatConversionException">
          <Members>
           <Member Name="#.ctor(System.Char,System.Type)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'IllegalFormatConversionException.IllegalFormatConversionException(char, Type)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IllegalFormatPrecisionException">
          <Members>
           <Member Name="#.ctor(System.Int32)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'IllegalFormatPrecisionException.IllegalFormatPrecisionException(int)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IllegalFormatWidthException">
          <Members>
           <Member Name="#.ctor(System.Int32)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'IllegalFormatWidthException.IllegalFormatWidthException(int)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IPersistentMap">
          <Members>
           <Member Name="#cons(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'IPersistentMap.cons(object)'</Item>
               <Item>'obj'</Item>
               <Item>'o'</Item>
               <Item>'IPersistentCollection.cons(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="JavaConcurrentDictionary`2">
          <Members>
           <Member Name="#Values">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'JavaConcurrentDictionary&lt;TKey, TValue&gt;.Values'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="JReMatcher">
          <Members>
           <Member Name="#group(System.Int32)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'group'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Keyword">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2011-07-31 21:54:45Z">
            <Issue Name="Operator">
             <Item>'Keyword'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Keyword'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Keyword'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Keyword'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#invoke(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Keyword.invoke(object)'</Item>
               <Item>'obj'</Item>
               <Item>'arg1'</Item>
               <Item>'AFn.invoke(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#invoke(System.Object,System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Keyword.invoke(object, object)'</Item>
               <Item>'obj'</Item>
               <Item>'arg1'</Item>
               <Item>'AFn.invoke(object, object)'</Item>
              </Issue>
             </Message>
             <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Keyword.invoke(object, object)'</Item>
               <Item>'notFound'</Item>
               <Item>'arg2'</Item>
               <Item>'AFn.invoke(object, object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LazySeq">
          <Members>
           <Member Name="#CopyTo(System.Object[],System.Int32)">
            <Messages>
             <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'LazySeq.CopyTo(object[], int)'</Item>
               <Item>'index'</Item>
               <Item>'arrayIndex'</Item>
               <Item>'ICollection&lt;object&gt;.CopyTo(object[], int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Remove(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'LazySeq.Remove(object)'</Item>
               <Item>'value'</Item>
               <Item>'item'</Item>
               <Item>'ICollection&lt;object&gt;.Remove(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LispReader">
          <Members>
           <Member Name="#matchSymbol(System.String,System.Int32)">
            <Messages>
             <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'LispReader.matchSymbol(string, int)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'LispReader.matchSymbol(string, int)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.IndexOf(string, int)'</Item>
               <Item>'LispReader.matchSymbol(string, int)'</Item>
               <Item>'string.IndexOf(string, int, StringComparison)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'LispReader.matchSymbol(string, int)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'LispReader.matchSymbol(string, int)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'LispReader.matchSymbol(string, int)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'LispReader.matchSymbol(string, int)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ReadDelimitedList(System.Char,clojure.lang.PushbackTextReader,System.Boolean)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'List&lt;object&gt;'</Item>
               <Item>'LispReader.ReadDelimitedList(char, PushbackTextReader, bool)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LispReader+CharacterReader">
          <Members>
           <Member Name="#Read(clojure.lang.PushbackTextReader,System.Char)">
            <Messages>
             <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString(string)'</Item>
               <Item>'LispReader.CharacterReader.Read(PushbackTextReader, char)'</Item>
               <Item>'int.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'LispReader.CharacterReader.Read(PushbackTextReader, char)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'LispReader.CharacterReader.Read(PushbackTextReader, char)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LispReader+CtorReader">
          <Members>
           <Member Name="#Read(clojure.lang.PushbackTextReader,System.Char)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'LispReader.CtorReader.Read(PushbackTextReader, char)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'LispReader.CtorReader.Read(PushbackTextReader, char)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'LispReader.CtorReader.Read(PushbackTextReader, char)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LispReader+DispatchReader">
          <Members>
           <Member Name="#Read(clojure.lang.PushbackTextReader,System.Char)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'LispReader.DispatchReader.Read(PushbackTextReader, char)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LispReader+EvalReader">
          <Members>
           <Member Name="#Read(clojure.lang.PushbackTextReader,System.Char)">
            <Messages>
             <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'LispReader.EvalReader.Read(PushbackTextReader, char)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="LispReader+SyntaxQuoteReader">
          <Members>
           <Member Name="#AnalyzeSyntaxQuote(System.Object,System.Boolean&amp;)">
            <Messages>
             <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'LispReader.SyntaxQuoteReader.AnalyzeSyntaxQuote(object, out bool)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'LispReader.SyntaxQuoteReader.AnalyzeSyntaxQuote(object, out bool)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'LispReader.SyntaxQuoteReader.AnalyzeSyntaxQuote(object, out bool)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MapEnumerator">
          <Messages>
           <Message TypeName="EnumeratorsShouldBeStronglyTyped" Category="Microsoft.Design" CheckId="CA1038" Created="2011-07-31 21:54:45Z">
            <Issue>
             <Item>'MapEnumerator'</Item>
            </Issue>
           </Message>
           <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Created="2011-07-31 21:54:45Z" FixCategory="DependsOnFix">
            <Issue Name="DependsOnFix">
             <Item>'MapEnumerator'</Item>
             <Item>'SeqEnumerator'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="MethodImplCache">
          <Members>
           <Member Name="#table">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'MethodImplCache.table'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MissingFormatArgumentException">
          <Members>
           <Member Name="#.ctor(System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'MissingFormatArgumentException.MissingFormatArgumentException(string)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MultiFn">
          <Members>
           <Member Name="#FindAndCacheBestMethod(System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'MultiFn.FindAndCacheBestMethod(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetFn(System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'MultiFn.GetFn(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#preferMethod(System.Object,System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'MultiFn.preferMethod(object, object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Namespace">
          <Members>
           <Member Name="#addAlias(clojure.lang.Symbol,clojure.lang.Namespace)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'Namespace.addAlias(Symbol, Namespace)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Namespace+NamespaceSerializationHelper">
          <Members>
           <Member Name="#GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <Messages>
             <Message Id="name" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Namespace.NamespaceSerializationHelper.GetRealObject(StreamingContext)'</Item>
               <Item>'name'</Item>
               <Item>'string'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Numbers">
          <Members>
           <Member Name="#unchecked_int_dec(System.Int32)">
            <Messages>
             <Message Id="x-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>x-1</Item>
               <Item>'Numbers.unchecked_int_dec(int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#unchecked_int_inc(System.Int32)">
            <Messages>
             <Message Id="x+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>x+1</Item>
               <Item>'Numbers.unchecked_int_inc(int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PersistentHashMap">
          <Members>
           <Member Name="#create(clojure.lang.ISeq)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'PersistentHashMap.create(ISeq)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#create1(System.Collections.IList)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'PersistentHashMap.create1(IList)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#createWithCheck(clojure.lang.ISeq)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'PersistentHashMap.createWithCheck(ISeq)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PersistentList">
          <Members>
           <Member Name="#creator">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'PersistentList.creator'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PersistentList+EmptyList">
          <Members>
           <Member Name="#Add(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'PersistentList.EmptyList.Add(object)'</Item>
               <Item>'value'</Item>
               <Item>'item'</Item>
               <Item>'ICollection&lt;object&gt;.Add(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Remove(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'PersistentList.EmptyList.Remove(object)'</Item>
               <Item>'value'</Item>
               <Item>'item'</Item>
               <Item>'ICollection&lt;object&gt;.Remove(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PersistentStructMap">
          <Members>
           <Member Name="#create(clojure.lang.PersistentStructMap+Def,clojure.lang.ISeq)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'PersistentStructMap.create(PersistentStructMap.Def, ISeq)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PersistentTreeMap">
          <Members>
           <Member Name="#create(clojure.lang.ISeq)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'PersistentTreeMap.create(ISeq)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#create(System.Collections.IComparer,clojure.lang.ISeq)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'PersistentTreeMap.create(IComparer, ISeq)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PersistentVector">
          <Members>
           <Member Name="#cons(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'PersistentVector.cons(object)'</Item>
               <Item>'val'</Item>
               <Item>'o'</Item>
               <Item>'APersistentVector.cons(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PersistentVector+Node">
          <Members>
           <Member Name="#Array">
            <Messages>
             <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'PersistentVector.Node.Array'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Printf">
          <Members>
           <Member Name="#Format(System.String,System.Object[])">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'format'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Printf+FormatSpecificierChunk">
          <Members>
           <Member Name="#ComputeConversion(System.Text.RegularExpressions.Group)">
            <Messages>
             <Message Id="System.Char.ToLower(System.Char)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'char.ToLower(char)'</Item>
               <Item>'Printf.FormatSpecificierChunk.ComputeConversion(Group)'</Item>
               <Item>'char.ToLower(char, CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ComputeIndex(System.Text.RegularExpressions.Group)">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'int.Parse(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.ComputeIndex(Group)'</Item>
               <Item>'int.Parse(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ComputePrecision(System.Text.RegularExpressions.Group)">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'int.Parse(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.ComputePrecision(Group)'</Item>
               <Item>'int.Parse(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ComputeWidth(System.Text.RegularExpressions.Group)">
            <Messages>
             <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'int.Parse(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.ComputeWidth(Group)'</Item>
               <Item>'int.Parse(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintDateTime(System.Text.StringBuilder,System.DateTime)">
            <Messages>
             <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'DateTime.ToString(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintDateTime(StringBuilder, DateTime)'</Item>
               <Item>'DateTime.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintDateTime(StringBuilder, DateTime)'</Item>
               <Item>'int.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintDateTime(StringBuilder, DateTime)'</Item>
               <Item>'int.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.Int64.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'long.ToString(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintDateTime(StringBuilder, DateTime)'</Item>
               <Item>'long.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintDouble(System.Text.StringBuilder,System.Double)">
            <Messages>
             <Message Id="System.Char.ToUpper(System.Char)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'char.ToUpper(char)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintDouble(StringBuilder, double)'</Item>
               <Item>'char.ToUpper(char, CultureInfo)'</Item>
              </Issue>
             </Message>
             <Message Id="System.Double.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'double.ToString(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintDouble(StringBuilder, double)'</Item>
               <Item>'double.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintDouble(StringBuilder, double)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintInteger(System.Text.StringBuilder,System.Int64)">
            <Messages>
             <Message Id="System.Int64.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'long.ToString(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintInteger(StringBuilder, long)'</Item>
               <Item>'long.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintInteger(System.Text.StringBuilder,System.UInt64)">
            <Messages>
             <Message Id="System.UInt64.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'ulong.ToString(string)'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintInteger(StringBuilder, ulong)'</Item>
               <Item>'ulong.ToString(string, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintIntOctHex(System.Text.StringBuilder,System.String,System.Boolean,System.Boolean)">
            <Messages>
             <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.ToUpper()'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintIntOctHex(StringBuilder, string, bool, bool)'</Item>
               <Item>'string.ToUpper(CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#PrintString(System.Text.StringBuilder,System.String)">
            <Messages>
             <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.ToUpper()'</Item>
               <Item>'Printf.FormatSpecificierChunk.PrintString(StringBuilder, string)'</Item>
               <Item>'string.ToUpper(CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToStringAux()">
            <Messages>
             <Message Id="System.Char.ToUpper(System.Char)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'char.ToUpper(char)'</Item>
               <Item>'Printf.FormatSpecificierChunk.ToStringAux()'</Item>
               <Item>'char.ToUpper(char, CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Ratio">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2011-07-31 21:54:45Z">
            <Issue Name="Operator">
             <Item>'Ratio'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Ratio'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Ratio'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Ratio'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#ToInt64(System.IFormatProvider)">
            <Messages>
             <Message Id="System.Convert.ToInt64(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToInt64(object)'</Item>
               <Item>'Ratio.ToInt64(IFormatProvider)'</Item>
               <Item>'Convert.ToInt64(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ToType(System.Type,System.IFormatProvider)">
            <Messages>
             <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ChangeType(object, Type)'</Item>
               <Item>'Ratio.ToType(Type, IFormatProvider)'</Item>
               <Item>'Convert.ChangeType(object, Type, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Ref">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2011-07-31 21:54:45Z">
            <Issue Name="Equals">
             <Item>'Ref'</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Ref'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Ref'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Ref'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Ref'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
           <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Created="2011-07-31 21:54:45Z" FixCategory="DependsOnFix">
            <Issue Name="DependsOnFix">
             <Item>'Ref'</Item>
             <Item>'ReaderWriterLockSlim'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#currentVal()">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Ref.currentVal()'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Reflector">
          <Members>
           <Member Name="#BoxArg(System.Reflection.ParameterInfo,System.Object)">
            <Messages>
             <Message Id="argType" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Reflector.BoxArg(ParameterInfo, object)'</Item>
               <Item>'argType'</Item>
               <Item>'Type'</Item>
              </Issue>
             </Message>
             <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ChangeType(object, Type)'</Item>
               <Item>'Reflector.BoxArg(ParameterInfo, object)'</Item>
               <Item>'Convert.ChangeType(object, Type, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallInstanceMethod(System.String,System.Collections.Generic.List`1&lt;System.Type&gt;,System.Object,System.Object[])">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'Reflector.CallInstanceMethod(string, List&lt;Type&gt;, object, params object[])'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'Reflector.CallInstanceMethod(string, List&lt;Type&gt;, object, params object[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'Reflector.CallInstanceMethod(string, List&lt;Type&gt;, object, params object[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallStaticMethod(System.String,System.Collections.Generic.List`1&lt;System.Type&gt;,System.Type,System.Object[])">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'Reflector.CallStaticMethod(string, List&lt;Type&gt;, Type, params object[])'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'Reflector.CallStaticMethod(string, List&lt;Type&gt;, Type, params object[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'Reflector.CallStaticMethod(string, List&lt;Type&gt;, Type, params object[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetArityZeroMethod(System.Type,System.String,System.Boolean)">
            <Messages>
             <Message Id="all" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Reflector.GetArityZeroMethod(Type, string, bool)'</Item>
               <Item>'all'</Item>
               <Item>'MethodInfo[]'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetInstanceFieldOrProperty(System.Object,System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Reflector.GetInstanceFieldOrProperty(object, string)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetInterfaceMethods(System.Type,System.String,System.Collections.Generic.List`1&lt;System.Type&gt;,System.Int32)">
            <Messages>
             <Message Id="methods" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Reflector.GetInterfaceMethods(Type, string, List&lt;Type&gt;, int)'</Item>
               <Item>'methods'</Item>
               <Item>'MethodInfo[]'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetMatchingMethod(clojure.lang.IPersistentMap,clojure.lang.CljCompiler.Ast.Expr,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;,System.String,System.Collections.Generic.List`1&lt;System.Type&gt;)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'Reflector.GetMatchingMethod(IPersistentMap, Expr, List&lt;HostArg&gt;, string, List&lt;Type&gt;)'</Item>
              </Issue>
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'Reflector.GetMatchingMethod(IPersistentMap, Expr, List&lt;HostArg&gt;, string, List&lt;Type&gt;)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetMatchingMethod(clojure.lang.IPersistentMap,System.Type,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;,System.String,System.Collections.Generic.List`1&lt;System.Type&gt;)">
            <Messages>
             <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'List&lt;HostArg&gt;'</Item>
               <Item>'Reflector.GetMatchingMethod(IPersistentMap, Type, List&lt;HostArg&gt;, string, List&lt;Type&gt;)'</Item>
              </Issue>
              <Issue>
               <Item>'List&lt;Type&gt;'</Item>
               <Item>'Reflector.GetMatchingMethod(IPersistentMap, Type, List&lt;HostArg&gt;, string, List&lt;Type&gt;)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#InvokeConstructor(System.Type,System.Object[])">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Reflector.InvokeConstructor(Type, object[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#InvokeMatchingMethod(System.String,System.Collections.Generic.List`1&lt;System.Reflection.MethodBase&gt;,System.Type,System.Object,System.Object[])">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Reflector.InvokeMatchingMethod(string, List&lt;MethodBase&gt;, Type, object, object[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'Reflector.InvokeMatchingMethod(string, List&lt;MethodBase&gt;, Type, object, object[])'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#MaybeReflectionWarn(clojure.lang.IPersistentMap,System.Reflection.MethodBase,System.String)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'Reflector.MaybeReflectionWarn(IPersistentMap, MethodBase, string)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#SetInstanceFieldOrProperty(System.Object,System.String,System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Reflector.SetInstanceFieldOrProperty(object, string, object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RestFn">
          <Members>
           <Member Name="#applyTo(clojure.lang.ISeq)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'RestFn.applyTo(ISeq)'</Item>
               <Item>'args'</Item>
               <Item>'arglist'</Item>
               <Item>'AFn.applyTo(ISeq)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RT">
          <Members>
           <Member Name="#decimalCast(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToDecimal(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToDecimal(object)'</Item>
               <Item>'RT.decimalCast(object)'</Item>
               <Item>'Convert.ToDecimal(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#EmptyObjectArray">
            <Messages>
             <Message TypeName="ArrayFieldsShouldNotBeReadOnly" Category="Microsoft.Security" CheckId="CA2105" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'RT.EmptyObjectArray'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#load(System.String,System.Boolean)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'RT.load(string, bool)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#LoadCljScript(System.String,System.Boolean)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'RT.LoadCljScript(string, bool)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NthFrom(System.Object,System.Int32)">
            <Messages>
             <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[])'</Item>
               <Item>'RT.NthFrom(object, int)'</Item>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'</Item>
              </Issue>
              <Issue>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[])'</Item>
               <Item>'RT.NthFrom(object, int)'</Item>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#NthFrom(System.Object,System.Int32,System.Object)">
            <Messages>
             <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[])'</Item>
               <Item>'RT.NthFrom(object, int, object)'</Item>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'</Item>
              </Issue>
              <Issue>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[])'</Item>
               <Item>'RT.NthFrom(object, int, object)'</Item>
               <Item>'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#printString(System.Object)">
            <Messages>
             <Message Id="System.IO.StringWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'StringWriter.StringWriter()'</Item>
               <Item>'RT.printString(object)'</Item>
               <Item>'StringWriter.StringWriter(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ulongCast(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToUInt64(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToUInt64(object)'</Item>
               <Item>'RT.ulongCast(object)'</Item>
               <Item>'Convert.ToUInt64(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RuntimeBootstrapFlag">
          <Members>
           <Member Name="#_doRTBootstrap">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'RuntimeBootstrapFlag._doRTBootstrap'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Symbol">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2011-07-31 21:54:45Z">
            <Issue Name="Operator">
             <Item>'Symbol'</Item>
             <Item>!=</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Symbol'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Symbol'</Item>
             <Item>==</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Symbol'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#CompareTo(System.Object)">
            <Messages>
             <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'Symbol.CompareTo(object)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'Symbol.CompareTo(object)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#invoke(System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Symbol.invoke(object)'</Item>
               <Item>'obj'</Item>
               <Item>'arg1'</Item>
               <Item>'AFn.invoke(object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#invoke(System.Object,System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Symbol.invoke(object, object)'</Item>
               <Item>'obj'</Item>
               <Item>'arg1'</Item>
               <Item>'AFn.invoke(object, object)'</Item>
              </Issue>
             </Message>
             <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'Symbol.invoke(object, object)'</Item>
               <Item>'notFound'</Item>
               <Item>'arg2'</Item>
               <Item>'AFn.invoke(object, object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Util">
          <Members>
           <Member Name="#BitCount(System.Int32)">
            <Messages>
             <Message Id="x*16843009" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>x*16843009</Item>
               <Item>'Util.BitCount(int)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToByte(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToByte(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToByte(object)'</Item>
               <Item>'Util.ConvertToByte(object)'</Item>
               <Item>'Convert.ToByte(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToChar(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToChar(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToChar(object)'</Item>
               <Item>'Util.ConvertToChar(object)'</Item>
               <Item>'Convert.ToChar(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToDecimal(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToDecimal(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToDecimal(object)'</Item>
               <Item>'Util.ConvertToDecimal(object)'</Item>
               <Item>'Convert.ToDecimal(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToDouble(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToDouble(object)'</Item>
               <Item>'Util.ConvertToDouble(object)'</Item>
               <Item>'Convert.ToDouble(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToFloat(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToSingle(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToSingle(object)'</Item>
               <Item>'Util.ConvertToFloat(object)'</Item>
               <Item>'Convert.ToSingle(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToInt(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToInt32(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToInt32(object)'</Item>
               <Item>'Util.ConvertToInt(object)'</Item>
               <Item>'Convert.ToInt32(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToLong(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToInt64(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToInt64(object)'</Item>
               <Item>'Util.ConvertToLong(object)'</Item>
               <Item>'Convert.ToInt64(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToSByte(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToSByte(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToSByte(object)'</Item>
               <Item>'Util.ConvertToSByte(object)'</Item>
               <Item>'Convert.ToSByte(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToShort(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToInt16(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToInt16(object)'</Item>
               <Item>'Util.ConvertToShort(object)'</Item>
               <Item>'Convert.ToInt16(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToUInt(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToUInt32(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToUInt32(object)'</Item>
               <Item>'Util.ConvertToUInt(object)'</Item>
               <Item>'Convert.ToUInt32(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToULong(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToUInt64(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToUInt64(object)'</Item>
               <Item>'Util.ConvertToULong(object)'</Item>
               <Item>'Convert.ToUInt64(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ConvertToUShort(System.Object)">
            <Messages>
             <Message Id="System.Convert.ToUInt16(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternate">
               <Item>'Convert.ToUInt16(object)'</Item>
               <Item>'Util.ConvertToUShort(object)'</Item>
               <Item>'Convert.ToUInt16(object, IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Var">
          <Members>
           <Member Name="#pushThreadBindings(clojure.lang.Associative)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Var.pushThreadBindings(Associative)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#set(System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Var.set(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'Var.set(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="clojure.lang.CljCompiler">
        <Types>
         <Type Name="MethodSignature">
          <Members>
           <Member Name="#CompareTo(clojure.lang.CljCompiler.MethodSignature)">
            <Messages>
             <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'MethodSignature.CompareTo(MethodSignature)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'MethodSignature.CompareTo(MethodSignature)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="clojure.lang.CljCompiler.Ast">
        <Types>
         <Type Name="ArithmeticRewriter">
          <Members>
           <Member Name="#TryUncheckedCast(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression&amp;)">
            <Messages>
             <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'ArithmeticRewriter.TryUncheckedCast(MethodCallExpression, ref Expression)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'ArithmeticRewriter.TryUncheckedCast(MethodCallExpression, ref Expression)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DefaultGetZeroArityMemberBinder">
          <Members>
           <Member Name="#FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'DefaultGetZeroArityMemberBinder.FallbackGetMember(DynamicMetaObject, DynamicMetaObject)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'DefaultGetZeroArityMemberBinder.FallbackGetMember(DynamicMetaObject, DynamicMetaObject)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DefaultInvokeMemberBinder">
          <Members>
           <Member Name="#FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'DefaultInvokeMemberBinder.FallbackInvokeMember(DynamicMetaObject, DynamicMetaObject[], DynamicMetaObject)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'DefaultInvokeMemberBinder.FallbackInvokeMember(DynamicMetaObject, DynamicMetaObject[], DynamicMetaObject)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DefExpr">
          <Members>
           <Member Name="#Eval()">
            <Messages>
             <Message Id="metaMap" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'DefExpr.Eval()'</Item>
               <Item>'metaMap'</Item>
               <Item>'IPersistentMap'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DefExpr+Parser">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.ParserContext,System.Object)">
            <Messages>
             <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'DefExpr.Parser.Parse(ParserContext, object)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'DefExpr.Parser.Parse(ParserContext, object)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DynInitHelper">
          <Members>
           <Member Name="#CreateStaticCtor()">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'DynInitHelper.CreateStaticCtor()'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#RewriteCallSite(System.Runtime.CompilerServices.CallSite,Microsoft.Scripting.Generation.TypeGen)">
            <Messages>
             <Message Id="p" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'DynInitHelper.RewriteCallSite(CallSite, TypeGen)'</Item>
               <Item>'p'</Item>
               <Item>'Type'</Item>
              </Issue>
             </Message>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'DynInitHelper.RewriteCallSite(CallSite, TypeGen)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DynUtils">
          <Members>
           <Member Name="#CreateArgNames(System.Int32)">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'DynUtils.CreateArgNames(int)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FnExpr">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.ParserContext,clojure.lang.ISeq,System.String)">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'FnExpr.Parse(ParserContext, ISeq, string)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FnMethod">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.FnExpr,clojure.lang.ISeq,System.Boolean)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'FnMethod.Parse(FnExpr, ISeq, bool)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#StaticMethodName">
            <Accessors>
             <Accessor Name="#get_StaticMethodName()">
              <Messages>
               <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
                <Issue Name="IFormatProviderAlternateString">
                 <Item>'string.Format(string, object, object)'</Item>
                 <Item>'FnMethod.StaticMethodName.get()'</Item>
                 <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
                 <Item>'CultureInfo.CurrentCulture'</Item>
                 <Item>'CultureInfo.InvariantCulture'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="HostExpr">
          <Members>
           <Member Name="#CanEmitPrimitive">
            <Accessors>
             <Accessor Name="#get_CanEmitPrimitive()">
              <Messages>
               <Message TypeName="SealMethodsThatSatisfyPrivateInterfaces" Category="Microsoft.Security" CheckId="CA2119" Created="2011-07-31 21:54:45Z">
                <Issue>
                 <Item>'HostExpr.CanEmitPrimitive.get()'</Item>
                 <Item>MaybePrimitiveExpr</Item>
                 <Item>'HostExpr'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="#GenCodeUnboxed(clojure.lang.CljCompiler.Ast.RHC,clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.GenContext)">
            <Messages>
             <Message TypeName="SealMethodsThatSatisfyPrivateInterfaces" Category="Microsoft.Security" CheckId="CA2119" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'HostExpr.GenCodeUnboxed(RHC, ObjExpr, GenContext)'</Item>
               <Item>MaybePrimitiveExpr</Item>
               <Item>'HostExpr'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="HostExpr+Parser">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.ParserContext,System.Object)">
            <Messages>
             <Message Id="minfo" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'HostExpr.Parser.Parse(ParserContext, object)'</Item>
               <Item>'minfo'</Item>
               <Item>'MethodInfo'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IdentityHashMap">
          <Messages>
           <Message TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229" Created="2011-08-02 02:35:39Z">
            <Issue Name="MakeUnsealedMagicConstructorFamily">
             <Item>'IdentityHashMap'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="InstanceMethodExpr">
          <Members>
           <Member Name="#.ctor(System.String,clojure.lang.IPersistentMap,clojure.lang.Symbol,clojure.lang.CljCompiler.Ast.Expr,System.String,System.Collections.Generic.List`1&lt;System.Type&gt;,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'InstanceMethodExpr.InstanceMethodExpr(string, IPersistentMap, Symbol, Expr, string, List&lt;Type&gt;, List&lt;HostArg&gt;)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="InvokeExpr">
          <Members>
           <Member Name="#.ctor(System.String,clojure.lang.IPersistentMap,clojure.lang.Symbol,clojure.lang.CljCompiler.Ast.Expr,clojure.lang.IPersistentVector)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object, object)'</Item>
               <Item>'InvokeExpr.InvokeExpr(string, IPersistentMap, Symbol, Expr, IPersistentVector)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'InvokeExpr.InvokeExpr(string, IPersistentMap, Symbol, Expr, IPersistentVector)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GenProtoLight(clojure.lang.CljCompiler.Ast.RHC,clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.GenContext,System.Linq.Expressions.Expression)">
            <Messages>
             <Message Id="thisParam" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'InvokeExpr.GenProtoLight(RHC, ObjExpr, GenContext, Expression)'</Item>
               <Item>'thisParam'</Item>
               <Item>'ParameterExpression'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MethodExpr">
          <Members>
           <Member Name="#GenerateComplexArgList(clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.GenContext,System.Collections.Generic.List`1&lt;clojure.lang.CljCompiler.Ast.HostArg&gt;,System.Collections.Generic.List`1&lt;System.Linq.Expressions.Expression&gt;&amp;,System.Collections.Generic.List`1&lt;System.Linq.Expressions.ParameterExpression&gt;&amp;,System.Collections.Generic.List`1&lt;System.Linq.Expressions.Expression&gt;&amp;,System.Collections.Generic.List`1&lt;System.Linq.Expressions.Expression&gt;&amp;)">
            <Messages>
             <Message Id="cinfos" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'MethodExpr.GenerateComplexArgList(ObjExpr, GenContext, List&lt;HostArg&gt;, out List&lt;Expression&gt;, out List&lt;ParameterExpression&gt;, out List&lt;Expression&gt;, out List&lt;Expression&gt;)'</Item>
               <Item>'cinfos'</Item>
               <Item>'ConstructorInfo[]'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'MethodExpr.GenerateComplexArgList(ObjExpr, GenContext, List&lt;HostArg&gt;, out List&lt;Expression&gt;, out List&lt;ParameterExpression&gt;, out List&lt;Expression&gt;, out List&lt;Expression&gt;)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewExpr">
          <Members>
           <Member Name="#ComputeCtor()">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'NewExpr.ComputeCtor()'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewInstanceExpr">
          <Members>
           <Member Name="#Build(clojure.lang.IPersistentVector,clojure.lang.IPersistentVector,clojure.lang.Symbol,System.String,clojure.lang.Symbol,clojure.lang.Symbol,clojure.lang.ISeq,System.Object)">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'NewInstanceExpr.Build(IPersistentVector, IPersistentVector, Symbol, string, Symbol, Symbol, ISeq, object)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'NewInstanceExpr.Build(IPersistentVector, IPersistentVector, Symbol, string, Symbol, Symbol, ISeq, object)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'NewInstanceExpr.Build(IPersistentVector, IPersistentVector, Symbol, string, Symbol, Symbol, ISeq, object)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CompileStub(System.Type,clojure.lang.CljCompiler.Ast.NewInstanceExpr,System.Type[],System.Object)">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'NewInstanceExpr.CompileStub(Type, NewInstanceExpr, Type[], object)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NewInstanceMethod">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.ISeq,clojure.lang.Symbol,System.Collections.Generic.Dictionary`2&lt;clojure.lang.IPersistentVector,System.Collections.Generic.List`1&lt;System.Reflection.MethodInfo&gt;&gt;)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'NewInstanceMethod.Parse(ObjExpr, ISeq, Symbol, Dictionary&lt;IPersistentVector, List&lt;MethodInfo&gt;&gt;)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.LastIndexOf(string)'</Item>
               <Item>'NewInstanceMethod.Parse(ObjExpr, ISeq, Symbol, Dictionary&lt;IPersistentVector, List&lt;MethodInfo&gt;&gt;)'</Item>
               <Item>'string.LastIndexOf(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NumericConvertBinder">
          <Members>
           <Member Name="#Instance">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'NumericConvertBinder.Instance'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="NumericConvertOverloadResolverFactory">
          <Members>
           <Member Name="#Instance">
            <Messages>
             <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'NumericConvertOverloadResolverFactory.Instance'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ObjExpr">
          <Members>
           <Member Name="#GenerateConstructor(System.Reflection.Emit.TypeBuilder,System.Type)">
            <Messages>
             <Message Id="lb" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'ObjExpr.GenerateConstructor(TypeBuilder, Type)'</Item>
               <Item>'lb'</Item>
               <Item>'LocalBinding'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GenerateFnBaseClass(System.Type,clojure.lang.CljCompiler.Ast.GenContext)">
            <Messages>
             <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'int.ToString()'</Item>
               <Item>'ObjExpr.GenerateFnBaseClass(Type, GenContext)'</Item>
               <Item>'int.ToString(IFormatProvider)'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GenerateKeywordCallsites(System.Reflection.Emit.TypeBuilder)">
            <Messages>
             <Message Id="k" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'ObjExpr.GenerateKeywordCallsites(TypeBuilder)'</Item>
               <Item>'k'</Item>
               <Item>'Keyword'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GenerateValue(System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'ObjExpr.GenerateValue(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'ObjExpr.GenerateValue(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'ObjExpr.GenerateValue(object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'ObjExpr.GenerateValue(object)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TrimGenId(System.String)">
            <Messages>
             <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.LastIndexOf(string)'</Item>
               <Item>'ObjExpr.TrimGenId(string)'</Item>
               <Item>'string.LastIndexOf(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ObjMethod">
          <Members>
           <Member Name="#GenBodyCode(System.Type,clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.GenContext)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'ObjMethod.GenBodyCode(Type, ObjExpr, GenContext)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RecurExpr">
          <Members>
           <Member Name="#GenCode(clojure.lang.CljCompiler.Ast.RHC,clojure.lang.CljCompiler.Ast.ObjExpr,clojure.lang.CljCompiler.Ast.GenContext)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, params object[])'</Item>
               <Item>'RecurExpr.GenCode(RHC, ObjExpr, GenContext)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RecurExpr+Parser">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.ParserContext,System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'RecurExpr.Parser.Parse(ParserContext, object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TheVarExpr+Parser">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.ParserContext,System.Object)">
            <Messages>
             <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2011-07-31 21:54:45Z">
              <Issue Name="IFormatProviderAlternateString">
               <Item>'string.Format(string, object)'</Item>
               <Item>'TheVarExpr.Parser.Parse(ParserContext, object)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
               <Item>'CultureInfo.CurrentCulture'</Item>
               <Item>'CultureInfo.InvariantCulture'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TryExpr+Parser">
          <Members>
           <Member Name="#Parse(clojure.lang.CljCompiler.Ast.ParserContext,System.Object)">
            <Messages>
             <Message Id="retLocal" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'TryExpr.Parser.Parse(ParserContext, object)'</Item>
               <Item>'retLocal'</Item>
               <Item>'int'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="clojure.runtime">
        <Types>
         <Type Name="Properties">
          <Messages>
           <Message TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229" Created="2011-08-02 02:35:39Z">
            <Issue Name="MakeUnsealedMagicConstructorFamily">
             <Item>'Properties'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Load(System.IO.TextReader)">
            <Messages>
             <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'Properties.Load(TextReader)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.EndsWith(string)'</Item>
               <Item>'Properties.Load(TextReader)'</Item>
               <Item>'string.EndsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2011-07-31 21:54:45Z">
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'Properties.Load(TextReader)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'Properties.Load(TextReader)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'Properties.Load(TextReader)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'Properties.Load(TextReader)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'Properties.Load(TextReader)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="ArrayFieldsShouldNotBeReadOnly" Category="Microsoft.Security" CheckId="CA2105">
    <Resolution Name="Default">Either replace {0} with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array.</Resolution>
   </Rule>
   <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
    <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   </Rule>
   <Rule TypeName="EnumeratorsShouldBeStronglyTyped" Category="Microsoft.Design" CheckId="CA1038">
    <Resolution Name="Default">{0} should provide a strongly typed implementation of IEnumerator.Current.</Resolution>
   </Rule>
   <Rule TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229">
    <Resolution Name="CreateMagicConstructor">Add a constructor to {0} with the following signature: 'protected {0}(SerializationInfo info, StreamingContext context)'.</Resolution>
    <Resolution Name="MakeUnsealedMagicConstructorFamily">Declare the serialization constructor of {0}, an unsealed type, as protected.</Resolution>
   </Rule>
   <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
    <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   </Rule>
   <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
    <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   </Rule>
   <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
    <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
    <Resolution Name="Visibility">Mark {0} as public because it is a friendly alternate for operator {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013">
    <Resolution Name="Default">Consider adding an overload of the equality operator for {0} that takes the same parameters as {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231">
    <Resolution Name="Default">Because {0} is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Resolution>
   </Rule>
   <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
    <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   </Rule>
   <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
    <Resolution Name="Equals">{0} should override Equals since it implements IComparable.</Resolution>
    <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   </Rule>
   <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
    <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   </Rule>
   <Rule TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719">
    <Resolution Name="Default">Change either member or parameter name {0} so that one differs from the other.</Resolution>
   </Rule>
   <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
    <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   </Rule>
   <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
    <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   </Rule>
   <Rule TypeName="SealMethodsThatSatisfyPrivateInterfaces" Category="Microsoft.Security" CheckId="CA2119">
    <Resolution Name="Default">{0} is an overridable method that satisfies a member on the private interface '{1}'. Mark the method as final, implement it explicitly or seal its declaring type {2}.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
    <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
    <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
    <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
    <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   </Rule>
   <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
    <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
